//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputSystem/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""BlockMain"",
            ""id"": ""c5ab6377-f4a6-4772-8acd-5345eed03158"",
            ""actions"": [
                {
                    ""name"": ""Moving"",
                    ""type"": ""Value"",
                    ""id"": ""80812f73-635b-4238-a1f7-c6206caeba12"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""1683076f-b3d4-44c9-8992-e9307aa4e587"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""bc89f3c2-6e26-4059-850f-014bf375a56a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""54dd5a85-7ad4-4299-8e55-e1077aed1c20"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BlockMain"",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2ee40bb4-e6dd-433a-a8ce-ef92aab2808e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BlockMain"",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d3f41184-e3fb-4710-882f-f87c9cadb395"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BlockMain"",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""213d765d-997f-485c-ac5a-c3d44f245268"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BlockMain"",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c244d135-84fe-4a90-85c2-40b5a99991b5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""BlockMain"",
            ""bindingGroup"": ""BlockMain"",
            ""devices"": []
        }
    ]
}");
        // BlockMain
        m_BlockMain = asset.FindActionMap("BlockMain", throwIfNotFound: true);
        m_BlockMain_Moving = m_BlockMain.FindAction("Moving", throwIfNotFound: true);
        m_BlockMain_Newaction = m_BlockMain.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BlockMain
    private readonly InputActionMap m_BlockMain;
    private List<IBlockMainActions> m_BlockMainActionsCallbackInterfaces = new List<IBlockMainActions>();
    private readonly InputAction m_BlockMain_Moving;
    private readonly InputAction m_BlockMain_Newaction;
    public struct BlockMainActions
    {
        private @InputController m_Wrapper;
        public BlockMainActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moving => m_Wrapper.m_BlockMain_Moving;
        public InputAction @Newaction => m_Wrapper.m_BlockMain_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_BlockMain; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BlockMainActions set) { return set.Get(); }
        public void AddCallbacks(IBlockMainActions instance)
        {
            if (instance == null || m_Wrapper.m_BlockMainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BlockMainActionsCallbackInterfaces.Add(instance);
            @Moving.started += instance.OnMoving;
            @Moving.performed += instance.OnMoving;
            @Moving.canceled += instance.OnMoving;
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IBlockMainActions instance)
        {
            @Moving.started -= instance.OnMoving;
            @Moving.performed -= instance.OnMoving;
            @Moving.canceled -= instance.OnMoving;
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IBlockMainActions instance)
        {
            if (m_Wrapper.m_BlockMainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBlockMainActions instance)
        {
            foreach (var item in m_Wrapper.m_BlockMainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BlockMainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BlockMainActions @BlockMain => new BlockMainActions(this);
    private int m_BlockMainSchemeIndex = -1;
    public InputControlScheme BlockMainScheme
    {
        get
        {
            if (m_BlockMainSchemeIndex == -1) m_BlockMainSchemeIndex = asset.FindControlSchemeIndex("BlockMain");
            return asset.controlSchemes[m_BlockMainSchemeIndex];
        }
    }
    public interface IBlockMainActions
    {
        void OnMoving(InputAction.CallbackContext context);
        void OnNewaction(InputAction.CallbackContext context);
    }
}
